// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using review_apis.Models;

namespace review_apis.Migrations
{
    [DbContext(typeof(DbReferenceContext))]
    [Migration("20210417011019_AllTableAddedd")]
    partial class AllTableAddedd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReviewedIFoodModelTagModel", b =>
                {
                    b.Property<int>("ReviewedIFoodListId")
                        .HasColumnType("int");

                    b.Property<int>("TagListId")
                        .HasColumnType("int");

                    b.HasKey("ReviewedIFoodListId", "TagListId");

                    b.HasIndex("TagListId");

                    b.ToTable("ReviewedIFoodModelTagModel");
                });

            modelBuilder.Entity("review_apis.Models.ActivityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Msg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserIdFrom")
                        .HasColumnType("int");

                    b.Property<int>("UserIdTo")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("ActivityModel");
                });

            modelBuilder.Entity("review_apis.Models.BadgeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("review_apis.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewModelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("CommentModel");
                });

            modelBuilder.Entity("review_apis.Models.CommentReactionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("CommentReactionModel");
                });

            modelBuilder.Entity("review_apis.Models.FollowModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FollowerUserId")
                        .HasColumnType("int");

                    b.Property<int>("FollowingUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FollowModel");
                });

            modelBuilder.Entity("review_apis.Models.FoodItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("FoodItemModel");
                });

            modelBuilder.Entity("review_apis.Models.ImageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewModelId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewModelId");

                    b.ToTable("ImageModel");
                });

            modelBuilder.Entity("review_apis.Models.ProfileModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("review_apis.Models.ReactionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewModelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("ReactionModel");
                });

            modelBuilder.Entity("review_apis.Models.ReplyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("ReplyModel");
                });

            modelBuilder.Entity("review_apis.Models.ReplyReactionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<int>("ReplyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyModelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReplyModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("ReplyReactionModel");
                });

            modelBuilder.Entity("review_apis.Models.RestaurantModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("RestaurantModel");
                });

            modelBuilder.Entity("review_apis.Models.ReviewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsReview")
                        .HasColumnType("int");

                    b.Property<int>("ReviewRestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewedRestaurantModelId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewedRestaurantModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("ReviewModel");
                });

            modelBuilder.Entity("review_apis.Models.ReviewedIFoodModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<int?>("FoodItemModelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOffer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("PriceRangeEnd")
                        .HasColumnType("float");

                    b.Property<double>("PriceRangeStart")
                        .HasColumnType("float");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("ReviewModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodItemModelId");

                    b.HasIndex("ReviewModelId");

                    b.ToTable("ReviewedIFoodModel");
                });

            modelBuilder.Entity("review_apis.Models.ReviewedRestaurantModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DecorationRating")
                        .HasColumnType("float");

                    b.Property<double>("EnvironmentgRating")
                        .HasColumnType("float");

                    b.Property<bool>("IsBuffet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayZoon")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRooftop")
                        .HasColumnType("bit");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantModelId")
                        .HasColumnType("int");

                    b.Property<double>("ServicingRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantModelId");

                    b.ToTable("ReviewedRestaurantModel");
                });

            modelBuilder.Entity("review_apis.Models.TagModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TagModel");
                });

            modelBuilder.Entity("review_apis.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFirstTime")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ReviewedIFoodModelTagModel", b =>
                {
                    b.HasOne("review_apis.Models.ReviewedIFoodModel", null)
                        .WithMany()
                        .HasForeignKey("ReviewedIFoodListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("review_apis.Models.TagModel", null)
                        .WithMany()
                        .HasForeignKey("TagListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("review_apis.Models.ActivityModel", b =>
                {
                    b.HasOne("review_apis.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("review_apis.Models.CommentModel", b =>
                {
                    b.HasOne("review_apis.Models.ReviewModel", "ReviewModel")
                        .WithMany("CommentList")
                        .HasForeignKey("ReviewModelId");

                    b.HasOne("review_apis.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelId");

                    b.Navigation("ReviewModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("review_apis.Models.CommentReactionModel", b =>
                {
                    b.HasOne("review_apis.Models.CommentModel", "CommentModel")
                        .WithMany("CommentReactionList")
                        .HasForeignKey("CommentModelId");

                    b.HasOne("review_apis.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelId");

                    b.Navigation("CommentModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("review_apis.Models.FoodItemModel", b =>
                {
                    b.HasOne("review_apis.Models.UserModel", "UserModel")
                        .WithMany("FoodItemModel")
                        .HasForeignKey("UserModelId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("review_apis.Models.ImageModel", b =>
                {
                    b.HasOne("review_apis.Models.ReviewModel", "ReviewModel")
                        .WithMany("ImageList")
                        .HasForeignKey("ReviewModelId");

                    b.Navigation("ReviewModel");
                });

            modelBuilder.Entity("review_apis.Models.ReactionModel", b =>
                {
                    b.HasOne("review_apis.Models.ReviewModel", "ReviewModel")
                        .WithMany("ReactionList")
                        .HasForeignKey("ReviewModelId");

                    b.HasOne("review_apis.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelId");

                    b.Navigation("ReviewModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("review_apis.Models.ReplyModel", b =>
                {
                    b.HasOne("review_apis.Models.CommentModel", "CommentModel")
                        .WithMany("ReplyList")
                        .HasForeignKey("CommentModelId");

                    b.HasOne("review_apis.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelId");

                    b.Navigation("CommentModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("review_apis.Models.ReplyReactionModel", b =>
                {
                    b.HasOne("review_apis.Models.ReplyModel", "ReplyModel")
                        .WithMany("ReplyReactionList")
                        .HasForeignKey("ReplyModelId");

                    b.HasOne("review_apis.Models.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelId");

                    b.Navigation("ReplyModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("review_apis.Models.RestaurantModel", b =>
                {
                    b.HasOne("review_apis.Models.UserModel", "UserModel")
                        .WithMany("RestaurantModel")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("review_apis.Models.ReviewModel", b =>
                {
                    b.HasOne("review_apis.Models.ReviewedRestaurantModel", "ReviewedRestaurantModel")
                        .WithMany("ReviewList")
                        .HasForeignKey("ReviewedRestaurantModelId");

                    b.HasOne("review_apis.Models.UserModel", "UserModel")
                        .WithMany("ReviewList")
                        .HasForeignKey("UserModelId");

                    b.Navigation("ReviewedRestaurantModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("review_apis.Models.ReviewedIFoodModel", b =>
                {
                    b.HasOne("review_apis.Models.FoodItemModel", "FoodItemModel")
                        .WithMany("ReviewedIFoodList")
                        .HasForeignKey("FoodItemModelId");

                    b.HasOne("review_apis.Models.ReviewModel", "ReviewModel")
                        .WithMany("ReviewedFoodList")
                        .HasForeignKey("ReviewModelId");

                    b.Navigation("FoodItemModel");

                    b.Navigation("ReviewModel");
                });

            modelBuilder.Entity("review_apis.Models.ReviewedRestaurantModel", b =>
                {
                    b.HasOne("review_apis.Models.RestaurantModel", "RestaurantModel")
                        .WithMany("ReviewedRestaurantList")
                        .HasForeignKey("RestaurantModelId");

                    b.Navigation("RestaurantModel");
                });

            modelBuilder.Entity("review_apis.Models.UserModel", b =>
                {
                    b.HasOne("review_apis.Models.BadgeModel", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("review_apis.Models.CommentModel", b =>
                {
                    b.Navigation("CommentReactionList");

                    b.Navigation("ReplyList");
                });

            modelBuilder.Entity("review_apis.Models.FoodItemModel", b =>
                {
                    b.Navigation("ReviewedIFoodList");
                });

            modelBuilder.Entity("review_apis.Models.ReplyModel", b =>
                {
                    b.Navigation("ReplyReactionList");
                });

            modelBuilder.Entity("review_apis.Models.RestaurantModel", b =>
                {
                    b.Navigation("ReviewedRestaurantList");
                });

            modelBuilder.Entity("review_apis.Models.ReviewModel", b =>
                {
                    b.Navigation("CommentList");

                    b.Navigation("ImageList");

                    b.Navigation("ReactionList");

                    b.Navigation("ReviewedFoodList");
                });

            modelBuilder.Entity("review_apis.Models.ReviewedRestaurantModel", b =>
                {
                    b.Navigation("ReviewList");
                });

            modelBuilder.Entity("review_apis.Models.UserModel", b =>
                {
                    b.Navigation("FoodItemModel");

                    b.Navigation("RestaurantModel");

                    b.Navigation("ReviewList");
                });
#pragma warning restore 612, 618
        }
    }
}
